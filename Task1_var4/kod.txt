float t = 0;
float t1 = 0;
float ang=PI/100; //кут
float w=75;
float a = 50;
float b = 140;
float x = -45;
float y = 45;
float c = 230;
float d = 320;

void setup() // ініціалізація розміру вікна функцією setup()
{
  size(370, 370); //розмір вікна
  background(255); //встановлення білого фону
  stroke(167); //встановлення сірого контуру для квадрату, в якому обертається квадрат ((255)-чорне, 0-біле і ніби пропаде))
  fill(255, 200, 200); //встановлення заливки фігури всередині на рожевий колір
  rectMode(CENTER); //rectMode - змінює розташування прямокутників, тут - центр
  frameRate(15); //визначає кількість кадрів, які відображатимуться щосекунди
}
void move()
{
  t = t + ang; // параметр за яким повертається фігура, по замовчуванню 0, використовується в rotate(t) (в правий бік)
  t1 = t1 - ang; // параметр за яким повертається фігура, по замовчуванню 0, використовується в rotate(t) (в лівий бік)
 if(t>PI/2)
 {
   t=0;
 }
}
void draw() //викликається після setup() і виконує рядки коду, що містяться в його блоці, доки програма не буде зупинена
{
  background(35); //темно сірий фон вікна
  
  /*1 квадрат (лівий верхній кут)*/  
  //1 квадратик (лівий верхній кут)
  translate(a, a); // визначає величину зміщення обєктів у вікні дисплея
  rotate(t); // повертає фігуру на величину, визначену параметром кута ang 
  rect(0, 0, w, w); // малює квадрат 
  resetMatrix(); // замінює поточну матрицю на одиничну матрицю (по діагоналі 1)
  //2 квадратик (правий верхній кут)
  translate(b, a);
  rotate(t1);
  rect(0, 0, w, w);
  resetMatrix();
  //3 квадратик (лівий нижній кут)
  translate(a, b);
  rotate(t1);
  rect(0, 0, w, w);
  resetMatrix();
  //4 квадратик (правий нижній кут)
  translate(b, b);
  rotate(t);
  rect(0, 0, w, w);
  resetMatrix();

  /*2 квадрат (правий верхній кут)*/
  //1 квадратик (лівий нижній кут)
  translate(c, b); 
  rotate(t1); 
  rect(0, 0, w, w); 
  resetMatrix(); 
  //2 квадратик (лівий верхній кут)
  translate(c, a);
  rotate(t); 
  rect(0, 0, w, w); 
  resetMatrix(); 
  //3 квадратик (правий нижній кут)
  translate(d, b); 
  rotate(t); 
  rect(0, 0, w, w); 
  resetMatrix(); 
  //4 квадратик (правий верхній кут)
  translate(d, a); 
  rotate(t1); 
  rect(0, 0, w, w); 
  resetMatrix(); 
  
  /*3 квадрат (лівий нижній кут)*/
  //1 квадратик (лівий верхній кут)
  translate(a, c); 
  rotate(t); 
  rect(0, 0, w, w); 
  resetMatrix(); 
  //2 квадратик (правий верхній кут)
  translate(b, c); 
  rotate(t1); 
  rect(0, 0, w, w); 
  resetMatrix(); 
  //3 квадратик (лівий нижній кут)
  translate(a, d); 
  rotate(t1);
  rect(0, 0, w, w); 
  resetMatrix(); 
  //4 квадратик (правий нижній кут)
  translate(b, d); 
  rotate(t); 
  rect(0, 0, w, w); 
  resetMatrix(); 
  
  /*4 квадрат (правий нижній кут)*/
  //1 квадратик (лівий верхній кут)
  translate(c, c); 
  rotate(t); 
  rect(0, 0, w, w); 
  resetMatrix(); 
  //2 квадратик (правий верхній кут)
  translate(d, c); 
  rotate(t1); 
  rect(0, 0, w, w); 
  resetMatrix(); 
  //3 квадратик (лівий нижній кут)
  translate(c, d); 
  rotate(t1);
  rect(0, 0, w, w); 
  resetMatrix(); 
  //4 квадратик (правий нижній кут)
  translate(d, d); 
  rotate(t); 
  rect(0, 0, w, w); 
  resetMatrix(); 
  move();
  w=75/(sin(radians(135)-t)*sqrt(2)); // не виходить за межі лінії
  // radians перетворює градуси в радіани
}